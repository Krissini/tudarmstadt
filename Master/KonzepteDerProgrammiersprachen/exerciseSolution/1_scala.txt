/*
  Exercise 01
*/

object Exercise01 {
	
	def main(args: Array[String]): Unit = {

		import Factorial._
	  for (a <- 1 to 10) {
	    println((factorialA(a), factorialB(a), factorialC(a)))
	  }

		import Arithmetics._	  
	}
}

/* 
	Task 1: Factorial function in Scala

	Write one factorial function in each of the following styles.
	  a) recursion, no mutation
	  b) for loop with accumulator variable
	  c) folding, no mutation
*/

object Factorial {

	def factorialA(n: Int): Int = if (n <= 1) 1 else n * factorialA(n - 1) 
	
	def factorialB(n: Int): Int = {
		var acc = 1
		for (counter <- 1 to n) {
		  acc *= counter
		}
		acc
	}
	
	/*
	  def factorialB2(n: Int): Int = {
	    var acc = 1
	    var counter = n
	    while(counter > 1) {
	      acc = counter * acc
	      counter -= 1
	    }
	    acc
	  }	
	 */
	
	def factorialC(n: Int): Int = 
	  (1 to n).foldLeft(1)(_ * _)
	  
	/*  
	  def factorialC2(n: Int): Int = {
	    (1 to n).foldLeft(1){ (x,y) => x * y} 
	  }    
	*/
}


/*
 * Task 2: Higher-Order Functions
 *
 * a) Arithmetics
 */
object Arithmetics {

	/*
	 * 1) Write a recursive function 'sum' that sums up the elements of a list of numbers.
	 */
	def sum(l: List[Int]): Int = l match {
    case Nil => 0
    case x :: xs => x + sum(xs)
  }

	/*
	 * 2) Write a recursive function 'prod' that builds the product of the elements in list of numbers.
	 */
	def prod(l: List[Int]): Int = l match {
    case Nil => 1
    case x :: xs => x * prod(xs)
  }

	/*
	 * 3) Can you recognize similarities between 'sum' and 'prod'? Write a higher-order function 'fold' that
	 *    abstracts over these similarities. Reimplement 'sum' and 'prod' in terms of 'fold'.
	 */

	def fold[A,R](l: List[A])(init: R, op: (A, R) => R): R = l match {
		case Nil => init
		case x :: xs => op(x, fold(xs)(init, op))
	}
	
	/*
	def fold2(l: List[Int])(init: Int, op: (Int, Int) => Int): Int = l match {
		case Nil => init
		case x :: xs => op(x, fold2(xs)(init, op))
	}
	
	def fold3(l: List[Int])(init: Int, op: (Int, Int) => Int): Int = {
		def rec(l: List[Int]): Int = l match {
			case Nil => init
			case x :: xs => op(x, rec(xs))
		}
		rec(l)
	}	
	*/
		
	def sumFold(l: List[Int]): Int = 
		fold[Int, Int](l)(0, _ + _)
	
	def prodFold(l: List[Int]): Int = 
		fold[Int, Int](l)(1, _ * _)
}

/*
 * b) Trees
 */
object Trees {

	trait Tree[A]
	case class Leaf[A](a: A) extends Tree[A]
	case class Node[A](l: Tree[A], r: Tree[A]) extends Tree[A]

	/*
	 * 1) Write a recursive function 'sum' that sums up the elements of a tree of numbers.
	 */

	def sumTree(tree: Tree[Int]): Int = tree match {
    case Leaf(a) => a //identity(a)
    case Node(l, r) => sumTree(l) + sumTree(r) 
  }

	/*
	 * 2) Write a recursive function 'collectTree' that collects all elements stored in the leaves of a tree.
	 */

	def collectTree[A](tree: Tree[A]): Set[A] = tree match {
    case Leaf(a) => Set(a)
    case Node(l, r) => collectTree(l) ++ collectTree(r)
  }

	/*
	 * 3) Can you recognize similarities between 'sumTree' and 'collectTree'? Write a higher-order function 'foldTree' that
	 *    abstracts over these similarities. Reimplement 'sumTree' and 'collectTree' in terms of 'foldTree'.
	 */
	def foldTree[A, R](tree: Tree[A])(leaf: A => R, node: (R, R) => R): R = {
    
    def rec(t: Tree[A]): R = t match {
      case Leaf(a) => leaf(a)
      case Node(l, r) => node(rec(l), rec(r))
    }
    
    rec(tree)
  }
  
  def sumTreeFold(tree: Tree[Int]): Int = 
  	foldTree[Int, Int](tree)(identity, _ + _)
	
	def collectTreeFold[A](tree: Tree[A]): Set[A] =
		foldTree[A, Set[A]](tree)(Set(_), _ ++ _)
}


	




/*
  Task 3: Scala code style

  Take a look at Scala coding styleguide
  (http://docs.scala-lang.org/style/overview.html).
  Refactor your code above accordingly.

*/
