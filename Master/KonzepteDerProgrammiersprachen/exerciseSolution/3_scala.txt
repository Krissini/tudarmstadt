package de.tuda.copl

/**
	* Created on 06.11.18.
	*
	* @author Mirko KÃ¶hler
	*/
object Exercise3 {

	sealed trait F1LAE
	case class Num(n: Int) extends F1LAE
	case class Add(lhs: F1LAE, rhs: F1LAE) extends F1LAE
	case class Sub(lhs: F1LAE, rhs: F1LAE) extends F1LAE
	case class Let(name: Symbol, namedExpr: F1LAE, body: F1LAE) extends F1LAE
	case class Id(name: Symbol) extends F1LAE
	case class App(funName: Symbol, arg: F1LAE) extends F1LAE

	case class FunDef(argName: Symbol, body: F1LAE)


	type FunDefs = Map[Symbol, FunDef]
	type Env = Map[Symbol, Int]


	object F1LAEImmediateSubstInterp {

		def subst(expr : F1LAE, substId : Symbol, value : F1LAE) : F1LAE = expr match {
			case Num(_) => expr

			case Add(lhs, rhs) =>
				Add(subst(lhs, substId, value), subst(rhs, substId, value))

			case Sub(lhs, rhs) =>
				Sub(subst(lhs, substId, value), subst(rhs, substId, value))

			case Let(boundId, namedExpr, boundBody) =>
				val substNamedExpr = subst(namedExpr, substId, value)
				if (boundId == substId)
					Let(boundId, substNamedExpr, boundBody)
				else
					Let(boundId, substNamedExpr, subst(boundBody, substId, value))

			case Id(name) =>
				if (substId == name) value else expr

			case App(funName, argExpr) => App(funName, subst(argExpr, substId, value))
		}

		def interp(expr : F1LAE, funDefs : FunDefs) : Int = expr match {
			case Num(n) => n

			case Add(lhs, rhs) => interp(lhs, funDefs) + interp(rhs, funDefs)
			case Sub(lhs, rhs) => interp(lhs, funDefs) - interp(rhs, funDefs)

			case Let(boundId, namedExpr, boundBody) =>
				val body = subst(boundBody, boundId, Num(interp(namedExpr, funDefs)))
				interp(body, funDefs)

			case Id(name) => sys.error("found unbound id " + name)

			case App(funName, argExpr) => funDefs(funName) match {
				case FunDef(argName, body) =>
					interp(subst(body, argName, Num(interp(argExpr, funDefs))), funDefs)
			}
		}
	}

	implicit def intToExpr(i : Int) : Num = Num(i)
	implicit def symToExpr(sym : Symbol) : Id = Id(sym)


	def main(args : Array[String]): Unit = {
		val fundefs = Map(
			'f -> FunDef('x, Add(Id('x), Id('c))),
			'g -> FunDef('x, Add(Id('x), Add(Num(1), Id('c))))
		)

		val expr =
			Let('x, 5,
				Let('y, 10,
					Let('c, 2,
						Add(App('f, 'x), App('g, 'y))
					)
				)
			)


		import F1LAEDynamicInterp._

		println(interp(expr, fundefs, Map()))

	}



	object F1LAEDynamicInterp {

		def interp(expr: F1LAE, funDefs: FunDefs, env: Env): Int = expr match {
			case Num(n) => n
			case Add(lhs, rhs) =>
				interp(lhs, funDefs, env) + interp(rhs, funDefs, env)
			case Sub(lhs, rhs) =>
				interp(lhs, funDefs, env) - interp(rhs, funDefs, env)
			case Let(boundId, namedExpr, boundBody) =>
				val newSubRep = env + (boundId -> interp(namedExpr, funDefs, env))
				interp(boundBody, funDefs, newSubRep)
			case Id(name) => env(name)
			case App(funName, argExpr) => funDefs(funName) match {
				case FunDef(argName, body) =>
					val funSubRep = env + (argName -> interp(argExpr, funDefs, env))
					interp(body, funDefs, funSubRep)
			}
		}
	}

	object F1LAEStaticInterp {

		def interp(expr: F1LAE, funDefs: FunDefs, env: Env): Int = expr match {
			case Num(n) => n
			case Add(lhs, rhs) =>
				interp(lhs, funDefs, env) + interp(rhs, funDefs, env)
			case Sub(lhs, rhs) =>
				interp(lhs, funDefs, env) - interp(rhs, funDefs, env)
			case Let(boundId, namedExpr, boundBody) =>
				val newEnv = env + (boundId -> interp(namedExpr, funDefs, env))
				interp(boundBody, funDefs, newEnv)
			case Id(name) => env(name)
			case App(funName, argExpr) => funDefs(funName) match {
				case FunDef(argName, body) =>
					val funEnv = Map(argName -> interp(argExpr, funDefs, env))
					interp(body, funDefs, funEnv)
			}
		}
	}



}
